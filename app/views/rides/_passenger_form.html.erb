<%= form_with(model: ride, class: "contents", data: { controller: "map" }) do |form| %>
  <% if ride.errors.any? %>
    <div id="error_explanation" class="bg-red-50 text-red-500 px-3 py-2 font-medium rounded-md mt-3">
      <h2><%= pluralize(ride.errors.count, "error") %> prohibited this ride from being saved:</h2>
      <ul class="list-disc ml-6">
        <% ride.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="w-full lg:flex">
    <!-- Left side - Form -->
    <div class="lg:w-1/2 p-6 rounded-2xl shadow-lg bg-white mb-6 lg:mb-0">
      <h2 class="text-xl font-medium text-gray-700 mb-6">Book a ride</h2>

      <!-- Pickup Location -->
      <div class="mb-6">
        <label for="pickup_location" class="block text-sm font-medium text-gray-700 mb-1">Pickup Location</label>
        <div class="flex items-center gap-2">
          <div class="relative flex-grow">
            <input type="text"
                  id="pickup_location"
                  name="ride[pickup_address]"
                  class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
                  placeholder="Enter pickup location"
                  data-map-target="pickupInput"
                  autocomplete="off" />
            <div class="autocomplete-dropdown" data-map-target="pickupSuggestions"></div>
            <input type="hidden" name="ride[pickup_address]" data-map-target="pickupAddress">
            <input type="hidden"
                  id="pickup_lat_field"
                  name="ride[pickup_lat]"
                  data-map-target="pickupLat">
            <input type="hidden"
                  id="pickup_lng_field"
                  name="ride[pickup_lng]"
                  data-map-target="pickupLng">
          </div>
            <button type="button"
                class="inline-flex items-center px-2.5 py-1.5 border border-gray-300 shadow-sm text-xs font-medium rounded text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                data-action="click->map#clearPickupLocation">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            Clear pickup
            </button>
          <button type="button"
                  class="inline-flex items-center px-2.5 py-1.5 border border-gray-300 shadow-sm text-xs font-medium rounded text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  data-action="click->map#useCurrentLocation">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            Use current
          </button>
        </div>
        <div data-map-target="locationStatus" class="mt-1 transition-opacity duration-500"></div>
      </div>

      <!-- Dropoff Location -->
      <div class="mb-6">
        <div class="flex justify-between items-center mb-1">
          <label for="dropoff_location" class="block text-sm font-medium text-gray-700">Dropoff Location</label>
          <button type="button"
                  class="inline-flex items-center px-2.5 py-1.5 border border-gray-300 shadow-sm text-xs font-medium rounded text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  data-action="click->map#useCurrentLocation"
                  data-type="dropoff">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            Use current
          </button>
        </div>
        <div class="flex items-center gap-2">
          <div class="relative flex-grow">
            <input type="text"
                  id="dropoff_location"
                  name="ride[dropoff_address]"
                  class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
                  placeholder="Enter dropoff location"
                  data-map-target="dropoffInput"
                  autocomplete="off" />
            <div class="autocomplete-dropdown" data-map-target="dropoffSuggestions"></div>
            <input type="hidden" name="ride[dropoff_address]" data-map-target="dropoffAddress">
            <input type="hidden"
                  id="dropoff_lat_field"
                  name="ride[dropoff_lat]"
                  data-map-target="dropoffLat">
            <input type="hidden"
                  id="dropoff_lng_field"
                  name="ride[dropoff_lng]"
                  data-map-target="dropoffLng">
          </div>
          <button type="button"
                class="inline-flex items-center px-2.5 py-1.5 border border-gray-300 shadow-sm text-xs font-medium rounded text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                data-action="click->map#clearDropoffLocation">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            Clear dropoff
          </button>
        </div>
      </div>

      <div class="my-5">
        <%= form.label :scheduled_time, "Schedule time", class: "block font-medium text-gray-500" %>
        <%= form.datetime_field :scheduled_time, value: ride.scheduled_time || Time.current, class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" %>
      </div>

      <div class="my-5">
        <%= form.label :requested_seats, "Requested seats", class: "block font-medium text-gray-500" %>
        <%= form.number_field :requested_seats, min: 1, max: 10, class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" %>
      </div>

      <div class="my-5">
        <%= form.label :special_instructions, "Special Instructions", class: "block font-medium text-gray-500" %>
        <%= form.text_area :special_instructions, rows: 3, class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" %>
      </div>

      <!-- Hidden fields for estimated price and distance -->
      <input type="hidden" name="ride[estimated_price]" id="estimated_price_field" value="0.00">
      <input type="hidden" name="ride[distance_km]" id="distance_km_field" value="0.00">

      <!-- Trip Information (shows when route is calculated) -->
      <div id="trip-info" class="my-6 p-4 border border-gray-200 rounded-lg bg-gray-50 hidden">
        <h3 class="text-base font-semibold text-gray-700 mb-2">Trip Information</h3>
        <div class="grid grid-cols-3 gap-4 text-center">
          <div>
            <p class="text-xs uppercase text-gray-400 font-semibold">Distance</p>
            <p id="trip-distance" class="font-bold text-gray-800">--</p>
          </div>
          <div>
            <p class="text-xs uppercase text-gray-400 font-semibold">Time</p>
            <p id="trip-duration" class="font-bold text-gray-800">--</p>
          </div>
          <div>
            <p class="text-xs uppercase text-gray-400 font-semibold">Est. Price</p>
            <p id="trip-price" class="font-bold text-gray-800">--</p>
          </div>
        </div>
      </div>

      <div class="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-3 mt-6">
        <%= form.submit "Create Ride", class: "rounded-lg px-4 py-2 bg-blue-600 hover:bg-blue-500 text-white font-medium cursor-pointer" %>
        <%= link_to "Back to dashboard", rides_path, class: "rounded-lg px-4 py-2 bg-gray-100 hover:bg-gray-50 text-blue-600 border border-blue-600 font-medium text-center" %>
      </div>
    </div>

    <!-- Right side - Map -->
    <div class="lg:w-1/2 lg:pl-6 h-full">
      <div
        id="map-container"
        class="w-full h-[400px] lg:h-full rounded-lg overflow-hidden map-container"
        data-map-target="mapContainer"
        data-action="map:locationChanged@document->map#updateFromPlaces">
      </div>
    </div>
  </div>
<% end %>

<style>
  /* Autocomplete dropdown styles */
  .autocomplete-dropdown {
    display: none;
    max-height: 200px;
    overflow-y: auto;
    position: absolute;
    width: 100%;
    background-color: white;
    border: 1px solid #e2e8f0;
    border-radius: 0.375rem;
    z-index: 10;
    margin-top: 2px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  .autocomplete-dropdown.show {
    display: block;
  }

  .autocomplete-item {
    padding: 0.5rem 1rem;
    cursor: pointer;
    border-bottom: 1px solid #e2e8f0;
  }

  .autocomplete-item:last-child {
    border-bottom: none;
  }

  .autocomplete-item:hover {
    background-color: #f3f4f6;
    transition: background-color 0.2s;
  }

  /* Map container styles */
  .map-container {
    width: 100%;
    height: 400px;
    border-radius: 0.5rem;
    overflow: hidden;
  }

  @media (min-width: 1024px) {
    .map-container {
      height: 100%;
      min-height: 500px;
    }
  }

  /* Mobile optimization */
  @media (max-width: 768px) {
    .contents {
      flex-direction: column;
    }

    .lg\:flex {
      flex-direction: column;
    }

    .lg\:w-1\/2 {
      width: 100%;
    }

    .lg\:pl-6 {
      padding-left: 0;
      padding-top: 1.5rem;
    }
  }
  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 0 rgba(54, 124, 255, 0.5);
    }
    50% {
      box-shadow: 0 0 0 10px rgba(54, 124, 255, 0.3), 0 0 0 30px rgba(54, 124, 255, 0.2);
    }
    100% {
      box-shadow: 0 0 0 40px rgba(54, 124, 255, 0);
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM loaded, setting up event listeners");

    // Listen for route:calculated event to show trip info
    document.addEventListener('route:calculated', function(event) {
      console.log("Received route:calculated event:", event.detail);
      const tripInfo = document.getElementById('trip-info');
      const tripDistance = document.getElementById('trip-distance');
      const tripDuration = document.getElementById('trip-duration');
      const tripPrice = document.getElementById('trip-price');
      const estimatedPriceField = document.getElementById('estimated_price_field');
      const distanceKmField = document.getElementById('distance_km_field');

      // Show trip info section
      tripInfo.classList.remove('hidden');

      // Update the visible elements
      tripDistance.textContent = event.detail.distance;
      tripDuration.textContent = event.detail.duration;

      // Extract distance value in kilometers
      let distanceKm = 0;

      if (event.detail.distance_value) {
        // If we have the raw value in meters, convert to km
        distanceKm = event.detail.distance_value / 1000;
      } else {
        // Fallback to parsing the text if raw value isn't available
        const distanceText = event.detail.distance;
        const distanceValue = parseFloat(distanceText.replace(/[^0-9.]/g, ''));
        distanceKm = distanceValue;

        // Check if the distance is in miles and convert to km if needed
        if (distanceText.toLowerCase().includes('mi')) {
          distanceKm = distanceValue * 1.60934;
        }
      }

      // Calculate estimated price (base fare + per km rate)
      const baseFare = 5.00;
      const perKmRate = 1.50;
      const estimatedPrice = baseFare + (distanceKm * perKmRate);

      // Format the price for display
      const formattedPrice = '$' + estimatedPrice.toFixed(2);
      tripPrice.textContent = formattedPrice;

      // Log values for debugging
      console.log("Distance (km):", distanceKm);
      console.log("Estimated price:", estimatedPrice);

      // Update hidden fields - make sure they exist before updating
      if (estimatedPriceField) {
        estimatedPriceField.value = estimatedPrice.toFixed(2);
        console.log("Set estimated_price_field to:", estimatedPriceField.value);
      } else {
        console.warn("Could not find estimated_price_field element");
      }

      if (distanceKmField) {
        distanceKmField.value = distanceKm.toFixed(2);
        console.log("Set distance_km_field to:", distanceKmField.value);
      } else {
        console.warn("Could not find distance_km_field element");
      }
    });
  });
</script>
