
  <%= turbo_stream_from "user_#{current_user.id}_rides" %>
  
  <%# Profile Section - Left Sidebar %>
  <%= render "dashboard/user_information", user: current_user %>  
  </div>

  <%# Rides Section - Right Content %>
  <div class="lg:col-span-2">
    <div class="bg-white rounded-lg shadow p-6">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-xl font-semibold">My Rides</h2>
        <%= link_to new_ride_path,
            class: "px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-500 flex items-center gap-2" do %>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
          </svg>
          <span>Book a Ride</span>
        <% end %>
      </div>

      <%# Replace the tab navigation with the partial %>
      <%= render "shared/tab_navigation" %>

      <%= turbo_frame_tag "rides_content" do %>
        <%= render "dashboard/rides_content", 
                  my_rides: @filtered_rides, 
                  params: { type: params[:type] || 'active' }, 
                  user: current_user %>
      <% end %>
    </div>
  </div>

<%# Partial for ride card to be rendered %>
<%# Create a new partial: app/views/rides/_ride_card.html.erb %>

<%= javascript_tag do %>
  // Function to update tab styling based on the current tab
  function updateTabStyling() {
    // Get the current tab from the hidden input or URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    const paramType = urlParams.get('type');
    const currentTabElement = document.getElementById('current_tab');
    const currentTabStateElement = document.getElementById('current_tab_state');
    
    // Priority: 1. URL param, 2. current_tab_state, 3. current_tab, 4. default to 'active'
    const currentTab = paramType || 
                      (currentTabStateElement ? currentTabStateElement.value : null) || 
                      (currentTabElement ? currentTabElement.value : null) || 
                      'active';
    
    // Reset all tabs
    document.querySelectorAll('#active_tab, #history_tab').forEach(tab => {
      tab.classList.remove('bg-blue-600', 'text-white');
      tab.classList.add('text-gray-700');
    });
    
    // Set active tab
    const activeTabElement = document.getElementById(currentTab + '_tab');
    if (activeTabElement) {
      activeTabElement.classList.add('bg-blue-600', 'text-white');
      activeTabElement.classList.remove('text-gray-700');
    } else {
      // Default to active tab if no match
      const defaultTab = document.getElementById('active_tab');
      if (defaultTab) {
        defaultTab.classList.add('bg-blue-600', 'text-white');
        defaultTab.classList.remove('text-gray-700');
      }
    }
    
    // Update hidden inputs to maintain state
    if (currentTabElement) {
      currentTabElement.value = currentTab;
    }
    if (currentTabStateElement) {
      currentTabStateElement.value = currentTab;
    }
  }

  // Add click event listeners to tabs
  function setupTabListeners() {
    document.querySelectorAll('#active_tab, #history_tab').forEach(tab => {
      tab.addEventListener('click', function() {
        // Get the tab type from the data attribute
        const tabType = this.dataset.tabType;
        
        // Update all hidden inputs with the new tab value
        document.querySelectorAll('#current_tab, #current_tab_state').forEach(input => {
          if (input) input.value = tabType;
        });
        
        // Update tab styling immediately
        document.querySelectorAll('#active_tab, #history_tab').forEach(t => {
          t.classList.remove('bg-blue-600', 'text-white');
          t.classList.add('text-gray-700');
        });
        
        this.classList.add('bg-blue-600', 'text-white');
        this.classList.remove('text-gray-700');
      });
    });
  }

  // Run on initial page load
  document.addEventListener('turbo:load', function() {
    updateTabStyling();
    setupTabListeners();
  });
  
  // Run when a turbo frame is loaded (for tab switching)
  document.addEventListener('turbo:frame-load', function(event) {
    if (event.target.id === 'rides_content') {
      updateTabStyling();
    }
  });
  
  // Run when a turbo frame is rendered
  document.addEventListener('turbo:render', function() {
    updateTabStyling();
    setupTabListeners();
  });
  
  // Initialize on DOMContentLoaded as well for non-Turbo cases
  document.addEventListener('DOMContentLoaded', function() {
    updateTabStyling();
    setupTabListeners();
  });
<% end %>