<%= turbo_stream_from current_user, "dashboard" %>
<%= turbo_stream_from "user_#{current_user.id}_rides" %>
<%= turbo_stream_from current_user.driver_profile, "vehicles" if current_user.driver_profile %>

<div class="grid grid-cols-1 lg:grid-cols-12 gap-6">
  <%# Left Column - Profile and Vehicles %>
  <div class="lg:col-span-4 space-y-6">
    <%# Profile Section %>
    <%= render "dashboard/user_information", user: current_user %>

    <%# Vehicles Section %>
    <div class="bg-white rounded-lg shadow p-6">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-xl font-semibold text-[#001D3D]">Vehicles</h2>
        <% if current_user.driver_profile %>
          <%= link_to new_driver_profile_vehicle_path(current_user.driver_profile),
              class: "inline-flex items-center px-4 py-2 bg-[#3758F9] text-white rounded-lg hover:bg-blue-600 transition-colors" do %>
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
            </svg>
            Add Vehicle
          <% end %>
        <% end %>
      </div>

      <div id="vehicles_list" class="space-y-4">
        <%= render "dashboard/vehicles_list",
            vehicles: current_user.driver_profile&.vehicles || [],
            driver_profile: current_user.driver_profile %>
      </div>
    </div>
  </div>

  <%# Right Column - Available Rides and My Rides %>
  <div class="lg:col-span-8">
    <%# Available Rides Near You %>
    <div class="bg-white rounded-lg shadow p-6 mb-6">
      <h2 class="text-xl font-semibold text-[#001D3D] mb-4">Available Rides Near You</h2>
      <div id="pending_rides">
        <%= render "dashboard/pending_rides", 
            pending_rides: @pending_rides, 
            current_user: current_user %>
      </div>
    </div>

    <%# My Rides %>
    <div class="bg-white rounded-lg shadow p-6">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-xl font-semibold text-[#001D3D]">My Rides</h2>
      </div>

      <%= render "shared/tab_navigation" %>

      <%= turbo_frame_tag "rides_content" do %>
        <%= render "dashboard/rides_content",
            my_rides: @filtered_rides,
            params: { type: params[:type] || 'active' },
            user: current_user %>
      <% end %>
    </div>
  </div>
</div>

<%= javascript_tag do %>
  // Function to update tab styling based on the current tab
  function updateTabStyling() {
    // Get the current tab from the hidden input or URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    const paramType = urlParams.get('type');
    const currentTabElement = document.getElementById('current_tab');
    const currentTabStateElement = document.getElementById('current_tab_state');
    
    // Priority: 1. URL param, 2. current_tab_state, 3. current_tab, 4. default to 'active'
    const currentTab = paramType || 
                      (currentTabStateElement ? currentTabStateElement.value : null) || 
                      (currentTabElement ? currentTabElement.value : null) || 
                      'active';
    
    // Reset all tabs
    document.querySelectorAll('#active_tab, #history_tab').forEach(tab => {
      tab.classList.remove('bg-blue-600', 'text-white');
      tab.classList.add('text-gray-700');
    });
    
    // Set active tab
    const activeTabElement = document.getElementById(currentTab + '_tab');
    if (activeTabElement) {
      activeTabElement.classList.add('bg-blue-600', 'text-white');
      activeTabElement.classList.remove('text-gray-700');
    } else {
      // Default to active tab if no match
      const defaultTab = document.getElementById('active_tab');
      if (defaultTab) {
        defaultTab.classList.add('bg-blue-600', 'text-white');
        defaultTab.classList.remove('text-gray-700');
      }
    }
    
    // Update hidden inputs to maintain state
    if (currentTabElement) {
      currentTabElement.value = currentTab;
    }
    if (currentTabStateElement) {
      currentTabStateElement.value = currentTab;
    }
  }

  // Add click event listeners to tabs
  function setupTabListeners() {
    document.querySelectorAll('#active_tab, #history_tab').forEach(tab => {
      tab.addEventListener('click', function() {
        // Get the tab type from the data attribute
        const tabType = this.dataset.tabType;
        
        // Update all hidden inputs with the new tab value
        document.querySelectorAll('#current_tab, #current_tab_state').forEach(input => {
          if (input) input.value = tabType;
        });
        
        // Update tab styling immediately
        document.querySelectorAll('#active_tab, #history_tab').forEach(t => {
          t.classList.remove('bg-blue-600', 'text-white');
          t.classList.add('text-gray-700');
        });
        
        this.classList.add('bg-blue-600', 'text-white');
        this.classList.remove('text-gray-700');
      });
    });
  }

  // Run on initial page load
  document.addEventListener('turbo:load', function() {
    updateTabStyling();
    setupTabListeners();
  });
  
  // Run when a turbo frame is loaded (for tab switching)
  document.addEventListener('turbo:frame-load', function(event) {
    if (event.target.id === 'rides_content') {
      updateTabStyling();
    }
  });
  
  // Run when a turbo frame is rendered
  document.addEventListener('turbo:render', function() {
    updateTabStyling();
    setupTabListeners();
  });
  
  // Initialize on DOMContentLoaded as well for non-Turbo cases
  document.addEventListener('DOMContentLoaded', function() {
    updateTabStyling();
    setupTabListeners();
  });
<% end %>